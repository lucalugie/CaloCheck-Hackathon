// // const automation = require('./automation/automation');
// // const automonths = require('./automation/automationThreeMonth');
// // const line = require('@line/bot-sdk');
// // const express = require('express');
// // const axios = require('axios');
// // const dotenv = require('dotenv');

// // //เรียกข้อมูล
// // const env = dotenv.config().parsed;
// // const app = express();

// // const lineConfig = {
// //     channelAccessToken: env.TOKEN_LINE_CALOCHECK,
// //     channelSecret: process.env.SECRET_TOKEN
// // }

// // //สร้างclient
// // const client = new messagingApi.MessagingApiClient(clientConfig);


// // app.post('/webhook', line.middleware(lineConfig), (req, res) => {
// //     try{
// //         const event = req.body.events;
// //         console.log(event);
// //         return event.length > 0 ? line.replyAll(event, res) : res.json({});
// //     }
// //     catch(error){
// //         console.log(error)
// //     }
// // })

// // const handleEvent = async (event) => {
    
// // }

// // app.listen(8000, () => {
// //     console.log("Listening on port 8000");
// // })



// // console.log("--------test------------")
// // automation.Message();
// //automonths.MessageAutoMonth();


// // Import all dependencies, mostly using destructuring for better view.
// import {
//     ClientConfig,
//     MessageAPIResponseBase,
//     messagingApi,
//     middleware,
//     MiddlewareConfig,
//     webhook,
//   } from '@line/bot-sdk';
//   import express, {Application, Request, Response} from 'express';
  
//   // Setup all LINE client and Express configurations.
//   const clientConfig= {
//     channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN || '',
//   };
  
//   const middlewareConfig = {
//     channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
//     channelSecret: process.env.CHANNEL_SECRET || '',
//   };
  
//   const PORT = process.env.PORT || 3000;
  
//   // Create a new LINE SDK client.
//   const client = new messagingApi.MessagingApiClient(clientConfig);
  
//   // Create a new Express application.
//   const app = express();
  
//   // Function handler to receive the text.
//   const textEventHandler = async (event) => {
//     // Process all variables here.
//     if (event.type !== 'message' || !event.message || event.message.type !== 'text') {
//       return;
//     }
  
//     // Process all message related variables here.
//     // Create a new message.
//     // Reply to the user.
//     await client.replyMessage({
//       replyToken: event.replyToken,
//       messages: [{
//         type: 'text',
//         text: event.message.text,
//       }],
//     });
//   };
  
//   // Register the LINE middleware.
//   // As an alternative, you could also pass the middleware in the route handler, which is what is used here.
//   // app.use(middleware(middlewareConfig));
  
//   // Route handler to receive webhook events.
//   // This route is used to receive connection tests.
//   app.get(
//     '/',
//     async (_ , res) => {
//       return res.status(200).json({
//         status: 'success',
//         message: 'Connected successfully!',
//       });
//     }
//   );
  
//   // This route is used for the Webhook.
//   app.post(
//     '/callback',
//     middleware(middlewareConfig),
//     async (req, res) => {
//       const callbackRequest = req.body;
//       const events = callbackRequest.events!;
  
//       // Process all the received events asynchronously.
//       const results = await Promise.all(
//         events.map(async (event: webhook.Event) => {
//           try {
//             await textEventHandler(event);
//           } catch (err: unknown) {
//             if (err instanceof Error) {
//               console.error(err);
//             }
  
//             // Return an error message.
//             return res.status(500).json({
//               status: 'error',
//             });
//           }
//         })
//       );
  
//       // Return a successfull message.
//       return res.status(200).json({
//         status: 'success',
//         results,
//       });
//     }
//   );
  
//   // Create a server and listen to it.
//   app.listen(PORT, () => {
//     console.log(`Application is live and listening on port ${PORT}`);
//   });